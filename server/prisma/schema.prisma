generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email      String  @unique
  firstName  String? @map("first_name")
  lastName   String? @map("last_name")
  nickname   String?
  password   String
  avatarPath String?

  workInterval   Int? @default(50) @map("work_interval")
  breakInterval  Int? @default(10) @map("break_interval")
  intervalsCount Int? @default(7) @map("intervals_count")

  comments        Comment[]
  timeBlocks      TimeBlock[]
  pomodoroSession PomodoroSession[]
  projects        Project[]
  teams           Team[]
  teamMembership  TeamMember[]
  tasks           Task[]

  @@index([email], type: Hash)
  @@map("user")
}

enum Priority {
  low
  medium
  high
}

enum Rights {
  create
  edit
  delete
  add_member
  edit_member
  delete_member
}

model TeamRole {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name   String
  rights Rights[] @default([])

  member TeamMember[]

  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  @@map("team_role")
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name      String
  imagePath String?         @default("") @map("image_path")
  tasks     Task[]
  members   ProjectMember[]

  owner   User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String  @map("owner_id")
  team    Team?   @relation(fields: [teamId], references: [id])
  teamId  String?

  @@map("project")
}

model ProjectMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?  @map("project_id")

  teamMember   TeamMember? @relation(fields: [teamMemberId], references: [id])
  teamMemberId String?     @map("team_member_id")

  @@map("projec_member")
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  description String?   @default("")
  priority    Priority? @default(low)
  status      Boolean?  @default(false)
  imagePath   String?   @default("/default") @map("image_path")
  deadline    DateTime
  color       String?

  comments Comment[]

  taskExecutor User   @relation(fields: [userId], references: [id])
  userId       String @unique @map("user_id")

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project_id")

  @@map("task")
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text String

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String @map("task_id")

  @@map("comment")
}

model TeamMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  projectMembership ProjectMember[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String @map("team_id")

  role   TeamRole? @relation(fields: [roleId], references: [id])
  roleId String?

  @@map("team_member")
}

model Team {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String

  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String @map("creator_id")

  members  TeamMember[]
  roles    TeamRole[]
  projects Project[]

  @@map("team")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String
  color    String?
  duration Int
  order    Int     @default(1)

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("time_block")
}

model PomodoroSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted Boolean? @default(false) @map("is_completed")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  rounds PomodoroRound[]

  @@map("pomodoro_session")
}

model PomodoroRound {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  totalSeconds Int      @map("total_seconds")
  isCompleted  Boolean? @default(false) @map("is_completed")

  pomodoroSession PomodoroSession @relation(fields: [pomodoroSessionId], references: [id], onDelete: Cascade)

  pomodoroSessionId String @map("pomodoro_session_id")

  @@map("pomodoro_round")
}
