generator client {
  provider = "prisma-client-js"
  output   = "generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email     String  @unique
  firstName String? @map("first_name")
  lastName  String? @map("last_name")
  nickname  String?
  password  String

  workInterval   Int? @default(50) @map("work_interval")
  breakInterval  Int? @default(18) @map("break_interval")
  intervalsCount Int? @default(7) @map("intervals_count")

  tasks             Task[]
  timeBlocks        TimeBlock[]
  pomodoroSession   PomodoroSession[]
  projects          Project[]
  projectMembership ProjectMember[]

  @@index([email], type: Hash)
  @@map("user")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  COMPLETED
  INCOMPLETE
  EXPIRED
  CANCELED
}

enum Rights {
  CREATE
  EDIT
  DELETE
  ADD_MEMBER
  EDIT_MEMBER
  DELETE_MEMBER
}

model ProjectRole {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name   String         @unique
  rights Rights[]       @default([])
  member ProjectMember?

  @@map("project_role")
}

model ProjectMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  role   ProjectRole @relation(fields: [roleId], references: [id])
  roleId String      @unique @map("role_id")

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?  @map("project_id")

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@map("project_member")
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  description String?         @default("")
  imagePath   String?         @default("") @map("image_path")
  tasks       Task[]
  members     ProjectMember[]

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @map("owner_id")

  @@map("project")
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  description String?   @default("")
  priority    Priority? @default(LOW)
  status      Status?   @default(INCOMPLETE)
  imagePath   String?   @default("/default") @map("image_path")
  deadline    DateTime
  color       String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project_id")

  @@map("task")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String
  color    String?
  duration Int
  order    Int     @default(1)

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("time_block")
}

model PomodoroSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted Boolean? @default(false) @map("is_completed")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  rounds PomodoroRound[]

  @@map("pomodoro_session")
}

model PomodoroRound {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  totalSeconds Int      @map("total_seconds")
  isCompleted  Boolean? @default(false) @map("is_completed")

  pomodoroSession   PomodoroSession @relation(fields: [pomodoroSessionId], references: [id], onDelete: Cascade)
  pomodoroSessionId String          @map("pomodoro_session_id")

  @@map("pomodoro_round")
}
